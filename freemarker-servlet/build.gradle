/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

title = "Apache FreeMarker Servlet and JSP support"
description = """\
FreeMarker template engine, Servlet and JSP support. \
This is an optional module, mostly useful in frameworks based on JSP Model-2 architecture, or when custom JSP tags \
need to be called from templates."""
published = true
inAggregateJavadoc = true

dependencies {
    compile project(":freemarker-core")

    // Because of the limitations of Eclipse dependency handling, we have to use the dependency artifacts from
    // Jetty ${jettyVersion} here, which is the Jetty version used for the tests. When the jettyVersion changes, run
    // `gradlew freemarker-servlet:dependencies` and copy-paste the exact versions to here:
    compileOnly "org.eclipse.jetty.orbit:javax.servlet:3.0.0.v201112011016"
    compileOnly "org.eclipse.jetty.orbit:javax.servlet.jsp:2.2.0.v201112011158"
    compileOnly "org.eclipse.jetty.orbit:javax.el:2.2.0.v201108011116"

    // ------------------------------------------------------------------------
    // For tests

    // When changing this, the non-test org.eclipse.jetty.orbit dependencies must be updated as well! Thus, it must use
    // exactly the same Servlet/JSP-related specification versions as the minimal requirements of FreeMarker.
    def jettyVersion = "8.1.22.v20160922" 
     
    testCompile "org.eclipse.jetty:jetty-server:$jettyVersion"
    testCompile "org.eclipse.jetty:jetty-webapp:$jettyVersion"
    testCompile "org.eclipse.jetty:jetty-jsp:$jettyVersion"
    testCompile "org.eclipse.jetty:jetty-util:$jettyVersion"
    // Jetty also contains the servlet-api and jsp-api classes

    testCompile("displaytag:displaytag:1.2") {
        exclude group: "com.lowagie", module: "itext"
        // We manage logging centrally:
        exclude group: "org.slf4j", module: "slf4j-log4j12"
        exclude group: "org.slf4j", module: "jcl104-over-slf4j"
        exclude group: "log4j", module: "log4j"
    }
    // Override Java 9 incompatible version (coming from displaytag):
    testCompile("commons-lang:commons-lang:2.6")

    def springVersion = "2.5.6.SEC03"
    testCompile("org.springframework:spring-core:$springVersion") {
        exclude group: "commons-logging", module: "commons-logging"
    }
    testCompile("org.springframework:spring-test:$springVersion") {
        exclude group: "commons-logging", module: "commons-logging"
    }
}

jar {
    manifest {
        // This is needed for "a.class.from.another.Bundle"?new() to work.
        instructionReplace 'DynamicImport-Package', '*'

        instructionReplace 'Bundle-RequiredExecutionEnvironment', 'JavaSE-1.7'
        // TODO Gradle adds a "Require-Capability"... is it a problem? If not, do we need the above?

        attributes(
                "Extension-name": "${project.group}:${project.name}",
                "Specification-Title": project.title,
                "Implementation-Title": project.title
        )
    }
}

javadoc {
    title "${project.title} ${versionCanonical} API"
}

// The identical parts of Maven "deployer" and "installer" configurations:
def mavenCommons = { callerDelegate ->
    delegate = callerDelegate

    pom.project {
        description project.description
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            mavenCommons(delegate)
        }
    }
}

install {
    repositories {
        mavenInstaller {
            mavenCommons(delegate)
        }
    }
}
