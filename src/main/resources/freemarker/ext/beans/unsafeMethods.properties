# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# Used by LegacyDefaultMemberAccessPolicy (not by DefaultMemberAccessPolicy).
# It does NOT provide enough safety if template authors aren't as trusted as the developers; you need to use a custom
# whitelist then (see WhitelistMemberAccessPolicy).

# This is a blacklist, that is, methods mentioned here will be not be accessible, but everything else will be.
# Furthermore, overridden version of the blacklisted methods will be accessible (which is strange, but we kept backward
# compatibility).

java.lang.Object.notify()
java.lang.Object.notifyAll()
java.lang.Object.wait()
java.lang.Object.wait(long)
java.lang.Object.wait(long,int)

java.lang.Class.forName(java.lang.String)
java.lang.Class.forName(java.lang.Module,java.lang.String)
java.lang.Class.forName(java.lang.String,boolean,java.lang.ClassLoader)
java.lang.Class.getClassLoader()
java.lang.Class.getModule()
java.lang.Class.getResource(java.lang.String)
java.lang.Class.getResourceAsStream(java.lang.String)
java.lang.Class.getSigners()
java.lang.Class.newInstance()

java.lang.ClassLoader.clearAssertionStatus()
java.lang.ClassLoader.defineClass([Lbyte;,int,int)
java.lang.ClassLoader.defineClass(java.lang.String,[Lbyte;,int,int)
java.lang.ClassLoader.defineClass(java.lang.String,[Lbyte;,int,int,java.security.ProtectionDomain)
java.lang.ClassLoader.defineClass(java.lang.String,java.nio.ByteBuffer,java.security.ProtectionDomain)
java.lang.ClassLoader.definePackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URL)
java.lang.ClassLoader.findClass(java.lang.String)
java.lang.ClassLoader.findClass(java.lang.String,java.lang.String)
java.lang.ClassLoader.findLibrary(java.lang.String)
java.lang.ClassLoader.findLoadedClass(java.lang.String)
java.lang.ClassLoader.findResource(java.lang.String)
java.lang.ClassLoader.findResource(java.lang.String,java.lang.String)
java.lang.ClassLoader.findResources(java.lang.String)
java.lang.ClassLoader.findSystemClass(java.lang.String)
java.lang.ClassLoader.getClassLoadingLock(java.lang.String)
java.lang.ClassLoader.getDefinedPackage(java.lang.String)
java.lang.ClassLoader.getDefinedPackages()
java.lang.ClassLoader.getPackage(java.lang.String)
java.lang.ClassLoader.getPackages()
java.lang.ClassLoader.getParent()
java.lang.ClassLoader.getPlatformClassLoader()
java.lang.ClassLoader.getResource(java.lang.String)
java.lang.ClassLoader.getResourceAsStream(java.lang.String)
java.lang.ClassLoader.getResources(java.lang.String)
java.lang.ClassLoader.getSystemClassLoader()
java.lang.ClassLoader.getSystemResource(java.lang.String)
java.lang.ClassLoader.getSystemResourceAsStream(java.lang.String)
java.lang.ClassLoader.getSystemResources(java.lang.String)
java.lang.ClassLoader.getUnnamedModule()
java.lang.ClassLoader.isRegisteredAsParallelCapable()
java.lang.ClassLoader.loadClass(java.lang.String)
java.lang.ClassLoader.loadClass(java.lang.String,boolean)
java.lang.ClassLoader.registerAsParallelCapable()
java.lang.ClassLoader.resources(java.lang.String)
java.lang.ClassLoader.setClassAssertionStatus(java.lang.String,boolean)
java.lang.ClassLoader.setDefaultAssertionStatus(boolean)
java.lang.ClassLoader.setPackageAssertionStatus(java.lang.String,boolean)
java.lang.ClassLoader.setSigners(java.lang.Class,[Ljava.lang.Object;)

java.lang.constant.ClassDesc.of(java.lang.String)
java.lang.constant.ClassDesc.of(java.lang.String,java.lang.String)
java.lang.constant.ClassDesc.ofDescriptor(java.lang.String)
java.lang.constant.ClassDesc.nested(java.lang.String,[Ljava.lang.String;)
java.lang.constant.ClassDesc.nested(java.lang.String)
java.lang.constant.ClassDesc.resolveConstantDesc(java.lang.invoke.MethodHandles$Lookup)

java.lang.reflect.Constructor.newInstance([Ljava.lang.Object;)
java.lang.reflect.Constructor.setAccessible(boolean)
java.lang.reflect.Constructor.setAccessible([Ljava.lang.reflect.AccessibleObject;,boolean)
java.lang.reflect.Constructor.trySetAccessible()

java.lang.reflect.Method.invoke(java.lang.Object,[Ljava.lang.Object;)
java.lang.reflect.Method.setAccessible(boolean)
java.lang.reflect.Method.setAccessible([Ljava.lang.reflect.AccessibleObject;,boolean)
java.lang.reflect.Method.trySetAccessible()

java.lang.reflect.Field.get(java.lang.Object)
java.lang.reflect.Field.getBoolean(java.lang.Object)
java.lang.reflect.Field.getByte(java.lang.Object)
java.lang.reflect.Field.getShort(java.lang.Object)
java.lang.reflect.Field.getChar(java.lang.Object)
java.lang.reflect.Field.getInt(java.lang.Object)
java.lang.reflect.Field.getLong(java.lang.Object)
java.lang.reflect.Field.getFloat(java.lang.Object)
java.lang.reflect.Field.getDouble(java.lang.Object)

java.lang.reflect.Field.set(java.lang.Object,java.lang.Object)
java.lang.reflect.Field.setAccessible(boolean)
java.lang.reflect.Field.setAccessible([Ljava.lang.reflect.AccessibleObject;,boolean)
java.lang.reflect.Field.setBoolean(java.lang.Object,boolean)
java.lang.reflect.Field.setByte(java.lang.Object,byte)
java.lang.reflect.Field.setChar(java.lang.Object,char)
java.lang.reflect.Field.setDouble(java.lang.Object,double)
java.lang.reflect.Field.setFloat(java.lang.Object,float)
java.lang.reflect.Field.setInt(java.lang.Object,int)
java.lang.reflect.Field.setLong(java.lang.Object,long)
java.lang.reflect.Field.setShort(java.lang.Object,short)
java.lang.reflect.Field.trySetAccessible()

java.lang.reflect.AccessibleObject.setAccessible([Ljava.lang.reflect.AccessibleObject;,boolean)
java.lang.reflect.AccessibleObject.setAccessible(boolean)
java.lang.reflect.AccessibleObject.trySetAccessible()

java.lang.reflect.Executable.setAccessible(boolean)
java.lang.reflect.Executable.setAccessible([Ljava.lang.reflect.AccessibleObject;,boolean)
java.lang.reflect.Executable.trySetAccessible()

java.lang.Thread.currentThread()

java.lang.Thread.destroy()
java.lang.Thread.dumpStack()
java.lang.Thread.enumerate([Ljava.lang.Thread;)
java.lang.Thread.getAllStackTraces()
java.lang.Thread.getContextClassLoader()
java.lang.Thread.getDefaultUncaughtExceptionHandler()
java.lang.Thread.getStackTrace()
java.lang.Thread.getUncaughtExceptionHandler()
java.lang.Thread.interrupt()
java.lang.Thread.join()
java.lang.Thread.join(long)
java.lang.Thread.join(long,int)
java.lang.Thread.onSpinWait()
java.lang.Thread.resume()
java.lang.Thread.run()
java.lang.Thread.setContextClassLoader(java.lang.ClassLoader)
java.lang.Thread.setDaemon(boolean)
java.lang.Thread.setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)
java.lang.Thread.setName(java.lang.String)
java.lang.Thread.setPriority(int)
java.lang.Thread.setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)
java.lang.Thread.sleep(long)
java.lang.Thread.sleep(long,int)
java.lang.Thread.start()
java.lang.Thread.stop()
java.lang.Thread.stop(java.lang.Throwable)
java.lang.Thread.suspend()
java.lang.Thread.yield()

java.lang.ThreadGroup.allowThreadSuspension(boolean)
java.lang.ThreadGroup.destroy()
java.lang.ThreadGroup.enumerate([Ljava.lang.ThreadGroup;,boolean)
java.lang.ThreadGroup.enumerate([Ljava.lang.ThreadGroup;)
java.lang.ThreadGroup.enumerate([Ljava.lang.Thread;)
java.lang.ThreadGroup.enumerate([Ljava.lang.Thread;,boolean)
java.lang.ThreadGroup.interrupt()
java.lang.ThreadGroup.list()
java.lang.ThreadGroup.resume()
java.lang.ThreadGroup.setDaemon(boolean)
java.lang.ThreadGroup.setMaxPriority(int)
java.lang.ThreadGroup.stop()
java.lang.ThreadGroup.suspend()
java.lang.ThreadGroup.uncaughtException(java.lang.Thread,java.lang.Throwable)

java.lang.Runtime.addShutdownHook(java.lang.Thread)
java.lang.Runtime.exec(java.lang.String,[Ljava.lang.String;,java.io.File)
java.lang.Runtime.exec(java.lang.String)
java.lang.Runtime.exec([Ljava.lang.String;)
java.lang.Runtime.exec([Ljava.lang.String;,[Ljava.lang.String;)
java.lang.Runtime.exec([Ljava.lang.String;,[Ljava.lang.String;,java.io.File)
java.lang.Runtime.exec(java.lang.String,[Ljava.lang.String;)
java.lang.Runtime.exit(int)
java.lang.Runtime.gc()
java.lang.Runtime.getRuntime()
java.lang.Runtime.halt(int)
java.lang.Runtime.load(java.lang.String)
java.lang.Runtime.loadLibrary(java.lang.String)
java.lang.Runtime.removeShutdownHook(java.lang.Thread)
java.lang.Runtime.runFinalization()
java.lang.Runtime.traceInstructions(boolean)
java.lang.Runtime.traceMethodCalls(boolean)
java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)
java.lang.System.clearProperty(java.lang.String)
java.lang.System.console()

java.lang.System.exit(int)
java.lang.System.gc()
java.lang.System.getLogger(java.lang.String,java.util.ResourceBundle)
java.lang.System.getLogger(java.lang.String)
java.lang.System.getSecurityManager()
java.lang.System.inheritedChannel()
java.lang.System.load(java.lang.String)
java.lang.System.loadLibrary(java.lang.String)
java.lang.System.runFinalization()
java.lang.System.runFinalizersOnExit(boolean)
java.lang.System.setErr(java.io.PrintStream)
java.lang.System.setIn(java.io.InputStream)
java.lang.System.setOut(java.io.PrintStream)
java.lang.System.setProperties(java.util.Properties)
java.lang.System.setProperty(java.lang.String,java.lang.String)
java.lang.System.setSecurityManager(java.lang.SecurityManager)

java.lang.Module.addExports(java.lang.String,java.lang.Module)
java.lang.Module.addOpens(java.lang.String,java.lang.Module)
java.lang.Module.addReads(java.lang.Module)
java.lang.Module.getClassLoader()

java.security.ProtectionDomain.getClassLoader()
java.security.ProtectionDomain.getCodeSource()
java.security.ProtectionDomain.implies(java.security.Permission)
java.security.ProtectionDomain.getPermissions()
java.security.ProtectionDomain.getPrincipals()
java.security.ProtectionDomain.staticPermissionsOnly()

java.net.URL.getContent()
java.net.URL.getContent([Ljava.lang.Class;)
java.net.URL.openConnection()
java.net.URL.openConnection(java.net.Proxy)
java.net.URL.openStream()
java.net.URL.setURLStreamHandlerFactory(java.net.URLStreamHandlerFactory)
